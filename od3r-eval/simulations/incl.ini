[General]
description = "(abstract)"
# General Settings stuff
num-rngs = 6
repeat = 5
seed-set = ${repetition}
sim-time-limit = 30min

# Parameter study
*.plan = ${plan= "Redundant Disjoint Path Usage (dest=once)", "Redundant Disjoint Path Usage dest per send", "Control Shortest Path"}

# Module RNG mapping
**failureGenerator.rng-0 = 1 	# (opt) used for time to repair and time to failure
**failureGenerator.rng-1 = 2 	# used for link selection
**od3rPCE.rng-0 = 3 			# (opt) used for change propagation time
**UdpBasicOd3rApp.rng-0 = 4		# (opt) used for message length, burst duration, sleep duration and send interval
**UdpBasicOd3rApp.rng-1 = 5		# used for destination selection

# Configurator settings
*.configurator.dumpAddresses = false # only for debugging
*.configurator.dumpTopology = false # only for debugging
#*.configurator.dumpLinks = true
*.configurator.dumpRoutes = false # only for debugging
*.configurator.addStaticRoutes = false

# default route computation
**.od3r.createDefaultRoutingTable = true

# Routing settings
*.*.ipv4.arp.typename = "GlobalArp"
*.*.ipv4.routingTable.netmaskRoutes = ""

# Router settings
*.router[*].hasUdp = true

# OD3R UDP App settings
*.router[*].numApps = 1
*.router[*].app[0].typename = "UdpBasicOd3rApp"
*.router[*].app[0].localPort = 100
*.router[*].app[0].destPort = 100
*.router[*].app[0].destAddrRNG = 1 # destAddrRNG
# startTime
# stopTime
*.router[*].app[0].messageLength = 1200B # messageLength = static value? # TODO: variable?
# timeToLive # TODO: variable?
*.router[*].app[0].destAddresses = "*" # destAddresses # TODO: change to specific hosts?
*.router[*].app[0].chooseDestAddrMode= ${destAddrMode="once", "perSend", "once" ! plan}# chooseDestAddrMode # TODO: variable?
*.router[*].app[0].burstDuration = 0s # burstDuration # TODO: variable?  + random
*.router[*].app[0].sleepDuration = 0s # sleepDuration # TODO: variable?  + random
*.router[*].app[0].sendInterval = 0.05s # sendInterval # TODO: variable  + random
# delayLimit # TODO: variable
*.router[*].app[0].redundantPacketDelivery = ${acceptDeliverTwice= true, true, false ! plan}
*.router[*].app[0].disjointPathSelector = ${disjointPathUsage= 256, 256, -1 ! plan}

# OD3R Settings

# computedRouteLifetime 
# depends on sendInterval per destination + change propagation time / time to repair/fail
# may influence: routing table size, number of route computations, number of source route exchanges,
# 					number of route refreshs 
**.od3r.computedRouteLifetime = 60s # TODO: variable
# exchangedRouteLifetime should be >= computedRouteLifetime
# depends sendInterval per destination + change propagation time / time to repair/fail
# may influence: routing table size, number of missing PID routes
**.od3r.exchangedRouteLifetime = 60s # TODO: variable

# OD3R PCE Settings
# changePropagationTime
#**od3rPCE.changePropagationTime = ${changeDelay= 0.5, 1, 10, 20, 40, 100}s # TODO: variable + random

# Failure Generator Settings
#*.failureGenerator.maxCurrentFailures = ${numConcurrentFailures=1,2,-1} # maxCurrentFailures # TODO: variable
#*.failureGenerator.maxNumFailures = 0 # maxNumFailures 
*.failureGenerator.linkSelectionRNG = 1 # linkSelectionRNG
*.failureGenerator.startAfter = 10s # startAfter
#*.failureGenerator.timeToRepair = ${timeToRepair= 0.5, 1, 10, 20, 40, 100}s # timeToRepair # TODO: variable  + random
#*.failureGenerator.timeToFailure = ${timeToFailure= 0.5, 1, 10, 20, 40, 100}s # timeToFailure # TODO: variable  + random

# Disabling unnecessary
**.ppp[*].**.vector-recording = false
#**.queue.bin-recording = false ## <=== sadly this is not working 
**.ppp[*].**.result-recording-modes = -histogram
**.udp.droppedPkWrongPort:vector(count).vector-recording = false
**.udp.droppedPkBadChecksum:vector(count).vector-recording = false
**.udp.packetSent:vector(packetBytes).vector-recording = false
**.udp.packetReceived:vector(packetBytes).vector-recording = false
**.udp.passedUpPk:vector(count).vector-recording = false ### <<=== UNSURE
*.router[0].ipv4.ip.packetDropNoRouteFound:vector(packetBytes).vector-recording = true ### <<=== UNSURE
*.router[*].ipv4.ip.packetDropNoRouteFound:vector(packetBytes).vector-recording = false ### <<=== UNSURE
**.router[*].app[*].rcvdPkLifetime:vector.vector-recording = false
**.router[*].app[*].rcvdPkSeqNo:vector.vector-recording = false
**.router[*].od3r.**.vector-recording = false
**.router[*].lo[*].lo.vector-recording = false

# ABSTRACT
######################################################################################################
[Config NoFailure]
*.failureGenerator.maxCurrentFailures = 0
# no failure so repait and failure time dont matter
*.failureGenerator.timeToRepair = default # timeToRepair
*.failureGenerator.timeToFailure = default # timeToFailure
# detection time is irrelevant here, too
**od3rPCE.changePropagationTime = default # TODO: variable + random

######################################################################################################
[Config Failure]
*.failureGenerator.maxCurrentFailures = ${numConcurrentFailures=1,2,-1}
#*.failureGenerator.timeToRepair = ${timeToRepair= 10, 20, 200}s # timeToRepair # TODO: variable  + random
#*.failureGenerator.timeToFailure = ${timeToFailure= 10, 20, 100}s # timeToFailure # TODO: variable  + random
*.failureGenerator.timeToRepair = ${timeToRepair= 15, 60, 120, 240}s
*.failureGenerator.timeToFailure = ${timeToFailure= 45}s
constraint = (($numConcurrentFailures) == 1) || (($timeToRepair) >= ($timeToFailure))

**od3rPCE.changePropagationTime = ${changeDelay= 1, 20, 40}s # TODO: variable + random

######################################################################################################
[Config SingleFailure]
sim-time-limit = 5min
*.failureGenerator.maxCurrentFailures = -1
*.failureGenerator.maxNumFailures = 1
# no failure so repait and failure time dont matter
*.failureGenerator.timeToRepair = ${timeToRepair= 15, 60, 120}s # timeToRepair # TODO: variable  + random
*.failureGenerator.startAfter = 0s
*.failureGenerator.timeToFailure = 10s # timeToFailure # TODO: variable  + random

**od3rPCE.changePropagationTime = ${changeDelay= 1, 20, 40}s # TODO: variable + random
